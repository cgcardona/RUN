{
  "script imports": {
		"scope": "javascript",
    "prefix": "script imports",
    "body": [
    "import { updateGround, setupGround } from './ground.js'",
    "import { updatePlayer, setupPlayer, getPlayerRect, setPlayerLose } from './player.js'",
    "import { updateObstacle, setupObstacle, getObstacleRects } from './obstacle.js'",
    "import { updateNFT, setupNFT, getNFTRects } from './nft.js'"
    ],
    "description": "script imports snippet"
  },
  "script constants": {
		"scope": "javascript",
    "prefix": "script constants",
    "body": [
    "const GAME_WIDTH = 100",
    "const GAME_HEIGHT = 30",
    "const SPEED_SCALE_INCREASE = 0.00001"
    ],
    "description": "script constants snippet"
  },
  "script dom": {
		"scope": "javascript",
    "prefix": "script dom",
    "body": [
    "const gameElem = document.querySelector('[data-game]')",
    "const scoreElem = document.querySelector('[data-score]')",
    "const startScreenElem = document.querySelector('[data-start-screen]') ",
    "const grunTotalScoreElem = document.querySelector('[data-run-total-score]')",
    "const nftTotalScoreElem = document.querySelector('[data-nft-total-score]')",
    "const nftScoreElem = document.querySelector('[data-nft-score]')"
    ],
    "description": "script dom snippet"
  },
  "script setPixelToGameScale definition": {
		"scope": "javascript",
    "prefix": "script setPixelToGameScale definition",
    "body": [
    "function setPixelToGameScale() {",
    "let gameToPixelScale",
    "if(window.innerWidth / window.innerHeight < GAME_WIDTH / GAME_HEIGHT) {",
    "gameToPixelScale = window.innerWidth / GAME_WIDTH",
    "} else {",
    "gameToPixelScale = window.innerHeight / GAME_HEIGHT",
    "}",
    "gameElem.style.width = `${GAME_WIDTH * gameToPixelScale}px`",
    "gameElem.style.height = `${GAME_HEIGHT * gameToPixelScale}px`",
    "}"
    ],
    "description": "script setPixelToGameScale definition snippet"
  },
  "script setPixelToGameScale invocation": {
		"scope": "javascript",
    "prefix": "script setPixelToGameScale invocation",
    "body": [
    "setPixelToGameScale()",
    "window.addEventListener('resize', setPixelToGameScale)",
    "document.addEventListener('keydown', handleStart, { once: true })"
    ],
    "description": "script setPixelToGameScale invocation snippet"
  },
  "script update function": {
		"scope": "javascript",
    "prefix": "script update function",
    "body": [
    "let lastTime",
    "let speedScale",
    "let score",
    "let nftScore = 0",
    "",
    "function update(time) {",
    "if(lastTime === null) {  ",
    "lastTime = time",
    "window.requestAnimationFrame(update)",
    "return",
    "}",
    "",
    "const delta = time - lastTime",
    "",
    "updateGround(delta, speedScale)",
    "updatePlayer(delta, speedScale)",
    "updateObstacle(delta, speedScale)",
    "updateNFT(delta, speedScale)",
    "updateSpeedScale(delta, speedScale)",
    "updateScore(delta, speedScale)",
    "",
    "checkIfWeGotNFT()",
    "",
    "if(checkLose()) return handleLose()",
    "lastTime = time",
    "window.requestAnimationFrame(update)",
    "}"
  ],
    "description": "script update function snippet"
  },
  "script checkLose function": {
		"scope": "javascript",
    "prefix": "script checkLose function",
    "body": [
    "function checkLose() {",
    "const playerRect = getPlayerRect()",
    "return getObstacleRects().some(rect => isCollision(rect, playerRect))",
    "}",
  ],
    "description": "script checkLose function snippet"
  },
  "script isCollision function": {
		"scope": "javascript",
    "prefix": "script isCollision function",
    "body": [
    "function isCollision(rect1, rect2) {",
    "return(",
    "rect1.left < rect2.right &&",
    "rect1.top < rect2.bottom &&",
    "rect1.right > rect2.left && ",
    "rect1.bottom > rect2.top",
    ")",
    "}",
  ],
    "description": "script isCollision function snippet"
  },
  "script checkIfWeGotNFT function": {
		"scope": "javascript",
    "prefix": "script checkIfWeGotNFT function",
    "body": [
    "function checkIfWeGotNFT() {",
    "const playerRect = getPlayerRect()",
    "if(getNFTRects().some(rect => isCollision(rect, playerRect))) { ",
    "const nftToRemove = document.querySelectorAll('[data-nft]')[0]",
    "nftToRemove.remove()",
    "nftScore += 1",
    "nftScoreElem.textContent = `NFT Score: ${nftScore}`",
    "}",
    "return getNFTRects().some(rect => isCollision(rect, playerRect))",
    "}"
  ],
    "description": "script checkIfWeGotNFT function snippet"
  },
  "script updateSpeedScale function": {
		"scope": "javascript",
    "prefix": "script updateSpeedScale function",
    "body": [
    "function updateSpeedScale(delta) {",
    "speedScale += delta * SPEED_SCALE_INCREASE",
    "}"
  ],
    "description": "script updateSpeedScale function snippet"
  },
  "script updateScore function": {
		"scope": "javascript",
    "prefix": "script updateScore function",
    "body": [
    "function updateScore(delta) {",
    "score += delta * 0.01",
    "scoreElem.textContent = `GAVAX score: ${Math.floor(score)}`",
    "}"
  ],
    "description": "script updateScore function snippet"
  },
  "script handleStart function": {
		"scope": "javascript",
    "prefix": "script handleStart function",
    "body": [
    "function handleStart() {",
    "lastTime = null",
    "speedScale = 1",
    "score = 0",
    "setupGround()",
    "setupPlayer()",
    "setupObstacle()",
    "setupNFT()",
    "startScreenElem.classList.add('hide')",
    "window.requestAnimationFrame(update)",
    "}"
  ],
    "description": "script handleStart function snippet"
  },
  "script window properties": {
		"scope": "javascript",
    "prefix": "script window properties",
    "body": [
    "window.totalNFTScore = 0",
    "window.totalRUNScore = 0"
  ],
    "description": "script window properties snippet"
  },
  "script handleLose function": {
		"scope": "javascript",
    "prefix": "script handleLose function",
    "body": [
    "function handleLose() {",
    "window.totalRUNScore += Math.floor(score)",
    "window.totalNFTScore += nftScore",
    "",
    "nftTotalScoreElem.textContent = `NFT Total Score: ${window.totalNFTScore}`",
    "grunTotalScoreElem.textContent = `RUN Total Score: ${window.totalRUNScore}`",
    "",
    "nftScore = 0",
    "nftScoreElem.textContent = `NFT Score: ${nftScore}`",
    "setPlayerLose()",
    "setTimeout(() => {",
    "document.addEventListener('keydown', handleStart, { once: true })",
    "startScreenElem.classList.remove('hide')",
    " }, 100);",
    "}"
  ],
    "description": "script handleLose function snippet"
  }
} 
  