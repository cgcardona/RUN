{
  "obstacle imports": {
		"scope": "javascript",
    "prefix": "obstacle imports",
    "body": [
    "import {",
    "getCustomProperty,",
    "setCustomProperty,",
    "incrementCustomProperty",
    "} from './updateCustomProperty.js'"
    ],
    "description": "obstacle imports snippet"
  },
  "obstacle constants": {
		"scope": "javascript",
    "prefix": "obstacle constants",
    "body": [
      "const SPEED = 0.05",
      "const OBSTACLE_INTERVAL_MIN = 500",
      "const OBSTACLE_INTERVAL_MAX = 2000"
    ],
    "description": "obstacle constants snippet"
  },
  "obstacle dom": {
		"scope": "javascript",
    "prefix": "obstacle dom",
    "body": "const worldElem = document.querySelector('[data-game]')",
    "description": "obstacle dom snippet"
  },
  "obstacle setupObstacle function": {
		"scope": "javascript",
    "prefix": "obstacle setupObstacle function",
    "body": [
    "let nextObstacleTime",
    "export function setupObstacle() {",
    "nextObstacleTime = OBSTACLE_INTERVAL_MIN",
    "",
    "document.querySelectorAll('[data-obstacle]').forEach(obstacle => {",
    "obstacle.remove()",
    "})",
    "}"
    ],
    "description": "obstacle setupObstacle function snippet"
  },
  "obstacle updateObstacle function": {
		"scope": "javascript",
    "prefix": "obstacle updateObstacle function",
    "body": [
    "export function updateObstacle(delta, speedScale) {",
    "document.querySelectorAll('[data-obstacle]').forEach(obstacle => {",
    "incrementCustomProperty(obstacle, '--left', delta * speedScale * SPEED * -1)",
    "if(getCustomProperty(obstacle, '--left') <= -100) {",
    "obstacle.remove()",
    "}",
    "})",
    "",
    "if(nextObstacleTime <= 0) {",
    "createObstacle()",
    "",
    "nextObstacleTime = randomNumberBetween(OBSTACLE_INTERVAL_MIN, OBSTACLE_INTERVAL_MAX) / speedScale",
    "}",
    "",
    "nextObstacleTime -= delta",
    "}"
    ],
    "description": "obstacle updateObstacle function snippet"
  },
  "obstacle getObstacleRects function": {
		"scope": "javascript",
    "prefix": "obstacle getObstacleRects function",
    "body": [
    "export function getObstacleRects() {",
    "return [...document.querySelectorAll('[data-obstacle]')].map(obstacle => {",
    "return obstacle.getBoundingClientRect()",
    "})",
    "}"
    ],
    "description": "obstacle getObstacleRects function snippet"
  },
  "obstacle createObstacle function": {
		"scope": "javascript",
    "prefix": "obstacle createObstacle function",
    "body": [
    "export function createObstacle() {",
    "const obstacle = document.createElement('img')",
    "obstacle.dataset.obstacle = true",
    "",
    "obstacle.src = './imgs/obstacle.png'",
    "",
    "obstacle.classList.add('obstacle')",
    "setCustomProperty(obstacle, '--left', 100)",
    "worldElem.append(obstacle)",
    "}"
    ],
    "description": "obstacle createObstacle function snippet"
  },
  "obstacle randomNumberBetween function": {
		"scope": "javascript",
    "prefix": "obstacle randomNumberBetween function",
    "body": [
    "export function randomNumberBetween(min, max) {",
    "return Math.floor(Math.random() * (max - min + 1) + min)",
    "}"
    ],
    "description": "obstacle randomNumberBetween function snippet"
  }
}
